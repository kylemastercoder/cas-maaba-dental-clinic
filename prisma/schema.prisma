generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  username  String   @unique
  password  String
  name      String
  role      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  branch    Branch[]
  logs Logs[]
}

model Patient {
  id            String   @id @default(cuid())
  firstName     String
  middleName    String?
  lastName      String
  suffix        String?
  facebookName  String?
  email         String
  address       String?
  sex           String?
  birthdate     String
  maritalStatus String?
  occupation    String?
  contactNumber String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  appointments  Appointments[]
  treatmentPlan TreatmentPlan[]
}

model Service {
  id          String   @id @default(cuid())
  name        String
  description String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  treatmentPlan TreatmentPlan[]
}

model Branch {
  id        String   @id @default(cuid())
  name      String
  address   String
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Supplies {
  id        String   @id @default(cuid())
  name      String
  category  String
  unit      String
  used      Int
  quantity  Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Appointments {
  id        String   @id @default(cuid())
  date      DateTime
  time      String
  status    String
  type      String
  title     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  patientId String?
  patient   Patient? @relation(fields: [patientId], references: [id])
}

model TreatmentPlan {
  id            String   @id @default(cuid())
  toothNumber   Int
  diagnosis     String
  dentalRemarks String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  patientId String?
  patient   Patient? @relation(fields: [patientId], references: [id])

  serviceId String?
  service   Service? @relation(fields: [serviceId], references: [id])
}

model Logs {
  id        String   @id @default(cuid())
  action    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userId String?
  user   User? @relation(fields: [userId], references: [id])
}
