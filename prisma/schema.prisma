generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  username  String   @unique
  password  String
  name      String
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  branchId  String
  branch    Branch   @relation(fields: [branchId], references: [id])

  roleId        String
  role          Role            @relation(fields: [roleId], references: [id])
  treatmentPlan TreatmentPlan[]
}

model Patient {
  id                    String   @id @default(cuid())
  firstName             String
  middleName            String?
  lastName              String
  suffix                String?
  facebookName          String?
  email                 String
  address               String?
  sex                   String?
  birthdate             String
  age                   String
  birthPlace            String
  maritalStatus         String?
  occupation            String?
  contactNumber         String
  weight                String
  height                String
  fatherName            String
  fatherOccupation      String
  fatherContactNumber   String
  motherName            String
  motherOccupation      String
  motherContactNumber   String
  guardianName          String
  guardianRelation      String
  guardianContactNumber String
  doctorName            String
  doctorSpecialization  String
  doctorContactNumber   String
  referredBy            String
  consultationReason    String
  isActive              Boolean  @default(true)
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt

  branchId       String
  branch         Branch           @relation(fields: [branchId], references: [id])
  treatmentPlan  TreatmentPlan[]
  medicalHistory MedicalHistory[]
}

model MedicalHistory {
  id                         String   @id @default(cuid())
  currentMedication          String
  previousHospitalization    String
  allergies                  String
  developmentalAbnormalities String
  histories                  String[]
  medicalCareReaction        String
  yesSpecify                 String?
  socialFamilyHistory        String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  patientId String
  patient   Patient @relation(fields: [patientId], references: [id])
}

model Service {
  id          String   @id @default(cuid())
  name        String
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  treatmentPlan TreatmentPlan[]
}

model Branch {
  id        String   @id @default(cuid())
  name      String
  address   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  patient  Patient[]
  supplies Supplies[]
  user     User[]
  logs     Logs[]
}

model Supplies {
  id        String   @id @default(cuid())
  sku       String
  name      String
  category  String
  used      Int
  quantity  Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  branchId String
  branch   Branch @relation(fields: [branchId], references: [id])

  unitId String
  unit   Units  @relation(fields: [unitId], references: [id])
}

model Units {
  id        String   @id @default(cuid())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  supplies Supplies[]
}

model Role {
  id        String   @id @default(cuid())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User[]
}

model TreatmentPlan {
  id            String   @id @default(cuid())
  toothNumber   Int
  diagnosis     String
  dentalRemarks String?
  paymentMethod String
  isPaid        Boolean  @default(false)
  status        String   @default("Pending")
  amount        String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  dentistId String
  dentist   User   @relation(fields: [dentistId], references: [id])

  patientId String?
  patient   Patient? @relation(fields: [patientId], references: [id])

  serviceId String?
  service   Service? @relation(fields: [serviceId], references: [id])
}

model Logs {
  id        String   @id @default(cuid())
  action    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  branchId String
  branch   Branch @relation(fields: [branchId], references: [id])
}
